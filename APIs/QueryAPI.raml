#%RAML 0.8

# AMWA NMOS Discovery and Registration Specification: Query API
# (c) AMWA 2016

title: Query
baseUri: http://example.api.com/x-nmos/query/{version}
version: v1.1
mediaType: application/json
schemas:
  - Node: !include schemas/node.json
    Nodes: !include schemas/nodes.json
    Device: !include schemas/device.json
    Devices: !include schemas/devices.json
    Source: !include schemas/source.json
    Sources: !include schemas/sources.json
    Flow: !include schemas/flow.json
    Flows: !include schemas/flows.json
    Sender: !include schemas/sender.json
    Senders: !include schemas/senders.json
    Receiver: !include schemas/receiver.json
    Receivers: !include schemas/receivers.json
    EmptySchema: !include schemas/empty.json
    ErrorSchema: !include schemas/error.json
traits:
  - paged:
      description: API resource supporting pagination of results
      queryParameters:
        paging.since:
          description: Return only the results which have been created/updated since the time specified (non-inclusive) (seconds:nanoseconds)
          type: string
          pattern: "^[0-9]+:[0-9]+$"
        paging.until:
          description: Return only the results which were created/updated up until the time specified (inclusive) (seconds:nanoseconds)
          type: string
          pattern: "^[0-9]+:[0-9]+$"
        paging.limit:
          description: Restrict the response to the specified number of results. Implementations may specify their own default and maximum for the limit
          type: integer
        paging.order:
          description: Specify whether paging should be based upon initial resource creation time, or when it was last modified. In both cases the response should be provided in descending order
          type: string
          enum: ["create", "update"]
          default: "update"
      responses:
        200:
          headers:
            Link:
              description: Provides references to cursors for paging. The 'rel' attribute may be one of 'next', 'prev', 'first' or 'last'
              type: string
              example: <http://example.api.com/x-nmos/v1.1/query/nodes/?paging.since=1441716353:6839634&paging.limit=20>; rel="next", <http://example.api.com/x-nmos/v1.1/query/nodes/?paging.until=1441716120:318744030&paging.limit=20>; rel="prev"
            X-Paging-Limit:
              description: Identifies the current limit being used for paging. This may not match the requested value if the requested value was too high for the implementation
              type: integer
            X-Paging-Since:
              description: Identifies the current value of the query parameter 'paging.since' in use, or if not specified identifies what value it would have had to return this data set. This value may be re-used as the paging.until value of a query to return the previous page of results. Combining this with the X-Paging-Until header value provides the absolute time bounds of the current returned data set.
              type: string
              example: 1441716353:6839634
            X-Paging-Until:
              description: Identifies the current value of the query parameter 'paging.until' in use, or if not specified identifies what value it would have had to return this data set. This value may be re-used as the paging.since value of a query to return the next page of results. Combining this with the X-Paging-Since header value provides the absolute time bounds of the current returned data set.
              type: string
              example: 1441716120:318744030
documentation:
  - title: Overview
    content: |
      The Query API is exposed by NMOS discovery Nodes. It is used to expose the contents of the (distributed) registry to all Nodes on the network. In smaller deployments where no such registry is available, Nodes with their own control capabilities fall back to interrogating Nodes directly using the Peer to Peer specification. This is a Read Only API.

      Attributes defined as 'Optional' MUST be returned by the Query API if they exist within the registry. The presence declaration relates more to whether it is required for them to be registered at the Registration API side, or presented via the Node API.
  - title: DNS-SD Advertisement
    content: |
      Query APIs MUST produce an mDNS advertisement of the type \_nmos-query.\_tcp. This MAY be accompanied by a unicast DNS announcement of the same type.

      The IP address and port of the Query API MUST be identified via the DNS-SD advertisement, with the full HTTP path then being resolved via the standard NMOS API path documentation.

      Multiple DNS-SD advertisements for the same API are permitted where the API is exposed via multiple ports and/or protocols.

  - title: DNS-SD TXT Records
    content: |
      **api\_proto**

      The DNS-SD advertisement MUST be accompanied by a TXT record of name 'api\_proto' with a value of either 'http' or 'https' dependent on the protocol in use by the Query API web server.

      **api\_ver**

      The DNS-SD advertisement MUST be accompanied by a TXT record of name 'api\_ver'. The value of this TXT record is a comma separated list of API versions supported by the server. For example: 'v1.0,v1.1,v2.0'. There should be no whitespace between commas, and versions should be listed in ascending order.

      **pri (Deprecated)**

      The DNS-SD advertisement MUST include a TXT record with key 'pri' and an integer value. This is required to support v1.0 clients, and is scheduled for removal in v2.0. In version v1.1 and upwards, servers MUST additionally represent a matching priority via the DNS-SD SRV record 'priority' and 'weight' as defined in RFC 2782.
      Before version 2.0 only: Values 0 to 99 correspond to an active NMOS Query API (zero being the highest priority). Values 100+ are reserved for development work to avoid colliding with a live system.

  - title: DNS-SD SRV Records
    content: |
      The Query API MUST announce its 'priority' and 'weight' via its mDNS or unicast DNS SRV record as defined by RFC 2782.

  - title: Websockets
    content: |
      Persistent connections to the Query API are supported via Websockets which can be set up via the /subscriptions resource. Query APIs may additionally support the HTTP 'Upgrade' header sent by clients to upgrade an HTTP GET request to a Websocket. In cases where this is performed, a corresponding entry in /subscriptions must also be created with matching query parameters.
/:
  displayName: Base
  get:
    description: List of paths available from this API
    body:
      schema: EmptySchema
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-base-get-200.json
          schema: !include schemas/queryapi-base.json
/nodes:
  displayName: Nodes
  get:
    is: [paged]
    description: List Nodes
    body:
      schema: EmptySchema
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-nodes-get-200.json
          schema: Nodes
  /{nodeId}:
    uriParameters:
      nodeId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Node
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-nodeid-get-200.json
            schema: Node
        404:
          description: Returned when the requested Node ID does not exist
          body:
            schema: ErrorSchema
/sources:
  displayName: Sources
  get:
    is: [paged]
    description: List Sources
    body:
      schema: EmptySchema
    queryParameters:
      device_id:
      label:
      description:
      format:
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-sources-get-200.json
          schema: Sources
  /{sourceId}:
    uriParameters:
      sourceId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Source
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-sourceid-get-200.json
            schema: Source
        404:
          description: Returned when the requested Source ID does not exist
          body:
            schema: ErrorSchema
/flows:
  displayName: Flows
  get:
    is: [paged]
    description: List Flows
    body:
      schema: EmptySchema
    queryParameters:
      source_id:
      label:
      description:
      format:
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-flows-get-200.json
          schema: Flows
  /{flowId}:
    uriParameters:
      flowId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Flow
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-flowid-get-200.json
            schema: Flow
        404:
          description: Returned when the requested Flow ID does not exist
          body:
            schema: ErrorSchema
/devices:
  displayName: Devices
  get:
    is: [paged]
    description: List Devices
    body:
      schema: EmptySchema
    queryParameters:
      node_id:
      label:
      description:
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-devices-get-200.json
          schema: Devices
  /{deviceId}:
    uriParameters:
      deviceId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Device
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-deviceid-get-200.json
            schema: Device
        404:
          description: Returned when the requested Device ID does not exist
          body:
            schema: ErrorSchema
/senders:
  displayName: Senders
  get:
    is: [paged]
    description: List Senders
    body:
      schema: EmptySchema
    queryParameters:
      flow_id:
      label:
      description:
      transport:
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-senders-get-200.json
          schema: Senders
  /{senderId}:
    uriParameters:
      senderId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Sender
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-senderid-get-200.json
            schema: Sender
        404:
          description: Returned when the requested Sender ID does not exist
          body:
            schema: ErrorSchema
/receivers:
  displayName: Receivers
  get:
    is: [paged]
    description: List Receivers
    body:
      schema: EmptySchema
    queryParameters:
      label:
      description:
      format:
      transport:
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-receivers-get-200.json
          schema: Receivers
  /{receiverId}:
    uriParameters:
      receiverId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single Receiver
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-receiverid-get-200.json
            schema: Receiver
        404:
          description: Returned when the requested Receiver ID does not exist
          body:
            schema: ErrorSchema
/subscriptions:
  displayName: Subscriptions
  post:
    description: Create a websocket subscription to an API resource
    body:
      example: !include ../examples/queryapi-v1.1-subscriptions-post-request.json
      schema: !include schemas/queryapi-v1.1-subscriptions-post-request.json
    responses:
      201:
        body:
          example: !include ../examples/queryapi-v1.1-subscriptions-post-200.json
          schema: !include schemas/queryapi-subscription-response.json
      200:
        body:
          example: !include ../examples/queryapi-v1.1-subscriptions-post-200.json
          schema: !include schemas/queryapi-subscription-response.json
      400:
        description: Returned when the POST request is incorrectly formatted or missing mandatory attributes
        body:
          schema: ErrorSchema
  get:
    is: [paged]
    description: List active connections to websockets providing real-time updates on resource changes
    body:
      schema: EmptySchema
    responses:
      200:
        body:
          example: !include ../examples/queryapi-v1.1-subscriptions-get-200.json
          schema: !include schemas/queryapi-subscriptions-response.json
  /{subscriptionId}:
    uriParameters:
      subscriptionId:
        type: string
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$"
    get:
      description: Get a single subscription
      body:
        schema: EmptySchema
      responses:
        200:
          body:
            example: !include ../examples/queryapi-v1.1-subscriptionid-get-200.json
            schema: !include schemas/queryapi-subscription-response.json
        404:
          description: Returned when the requested Subscription ID does not exist
          body:
            schema: ErrorSchema
    delete:
      description: Delete a single subscription
      body:
        schema: EmptySchema
      responses:
        204:
          description: The expected response, indicating 'No Content' following the DELETE
        403:
          description: Returned when a DELETE request is made against a non-persistent subscription which is managed by the Query API and cannot be deleted
          body:
            schema: ErrorSchema
        404:
          description: Returned when the requested Subscription ID does not exist
          body:
            schema: ErrorSchema
